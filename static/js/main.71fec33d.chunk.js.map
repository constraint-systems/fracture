{"version":3,"sources":["constants.js","mat4.js","gl_utils.js","State.js","Keyboard.js","Mouse.js","Sidebar.js","shaders.js","App.js","reportWebVitals.js","index.js"],"names":["zoom_scaler","multiply","out","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","lookAt","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","len","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","Math","abs","identity","sqrt","invert","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiplyPoint","matrix","point","c0r0","c1r0","c2r0","c3r0","c0r1","c1r1","c2r1","c3r1","c0r2","c1r2","c2r2","c3r2","c0r3","c1r3","c2r3","c3r3","x","y","z","w","setProjectionMatrices","scene","viewports","length","h","fovy","aspect","near","far","f","tan","nf","perspective","projection","PI","inverse_projection","getLookAt","camera","getWorldFromPx","px","camera_dist","world_z","projected","getProjectionZ","raw","point_world","castRay","index","mouse","viewport","ndz","view_projections","getNormalizedZ","clips","mouse_position","getClipsFromMouse","device_coordinates","inverse_view_projections","atom","key","default","aActive","aMode","aSize","aGridSize","aCols","aRows","aBarHeight","aSidebarWidth","aCameras","afCamera","atomFamily","aImageMap","aImages","sAddImage","selector","set","img","get","imgs","constrainActive","active","cols","rows","minmax","val","min","max","sActiveSelector","new_value","sSelectAll","sMoveActiveSelector","diff","dx","dy","sResizeActiveSelector","wlimit","hlimit","constrainResize","sViewports","vw","floor","vh","Array","map","_","i","c","r","sPanCamera","cameras","id","new_camera","slice","ndx","ndy","sActiveEscape","sResetZoom","console","log","sAllCameras","expandedCameras","push","sMosaicCamera","gw","gh","undefined","inverted","vx","vy","dify","sShakeCamera","nd","random","sPushCameras","c1","c2","sPullCameras","sShatterCamera","sSetImageMap","images","new_map","zoomLimit","new_zoom","aZoomMode","sZoomCamera","sign","zoomMode","zoom","sAddCol","insertCol","lastCol","imageMap","mapCols","n","copyCol","splice","recombinedMap","cameraCols","copyCameras","newCol","getID","copyID","cloneCamera","recombinedCameras","sRemCol","firstCol","sAddRow","insertRow","lastRow","mapRows","copyRow","cameraRows","newRow","sRemRow","firstRow","Keyboard","scene_ref","input_ref","useRecoilState","mode","setMode","moveActive","useSetRecoilState","resizeActive","zoomCamera","panCamera","mosaicCamera","shatterCamera","shakeCamera","pushCameras","pullCameras","selectAll","addCol","remCol","addRow","remRow","resetZoom","activeEscape","addImage","setImageMap","km_ref","useRef","undo","useUndo","redo","useRedo","useEffect","km","current","input","downHandler","e","press","toLowerCase","j","k","l","arrowleft","arrowright","arrowup","arrowdown","s","u","d","v","domLoadImage","bind","enter","pressed","upHandler","window","addEventListener","removeEventListener","Mouse","canvas_ref","mouse_ref","down","drag_start","batch_ref","useRecoilValue","setActive","useBatching","startBatch","endBatch","canvas","mouseMove","clientX","clientY","mouseDown","ax","ay","aw","ah","mouse_raw","mx","my","col","row","getViewportFromMouse","mcol","mrow","setPointerCapture","pointerId","mouseUp","releasePointerCapture","mouseWheel","preventDefault","deltaY","passive","Heading","props","className","style","marginBottom","children","toUpperCase","Info","Tip","color","HSpacer","width","height","Sidebar","sidebarWidth","setZoomMode","resize","position","right","top","overflow","padding","ToggleKeyButton","text","keyname","compare","click","TwoKeyButton","keyname1","keyname2","KeyButton","KeyButtonOnce","$button_ref","time","interval","$button","runInterval","setInterval","pointerDown","setTimeout","pointerUp","clearTimeout","clearInterval","ref","role","onClick","generateQuadPositions","initImageQuad","$img","regl","frag","vert","attributes","uv","uniforms","texture","view_projection","prop","count","id_counter","Root","views","image_map","image_draws","trackingByDefault","display","type","accept","SizeObserver","marginLeft","marginTop","Canvas","ShowActive","ShowCameras","ReadActive","setSize","setGridSize","barHeight","innerWidth","innerHeight","left","pointerEvents","background","borderBottom","borderRight","bottom","borderTop","borderLeft","camera_ids","CameraRead","paddingLeft","paddingRight","userSelect","round","Number","EPSILON","join","loadImage","src","presetImageMap","callback","Image","onload","pixel","place","drawImage","handleChange","this","files","item","indexOf","URL","createObjectURL","value","dispatchEvent","MouseEvent","bubbles","cancelable","view","gridSize","allCameras","rawSetImageMap","setCameras","regl_ref","useState","loaded","setLoaded","useIsTrackingHistory","setIsTrackingHistory","getIsTrackingHistory","REGL","gl","getContext","enable","SCISSOR_TEST","frame","tick","clear","vy_offset","scissor","draw","rawCameras","invertedCameras","setViewMatrices","CanvasCamera","setViewMatrix","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.71fec33d.chunk.js","sourcesContent":["export let start_zoom = 10;\nexport let base_zoom = 5;\nexport let zoom_scaler = 1.125;\n","/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Multiplies two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11],\n    a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  var b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  var x0,\n    x1,\n    x2,\n    y0,\n    y1,\n    y2,\n    z0,\n    z1,\n    z2,\n    len,\n    eyex = eye[0],\n    eyey = eye[1],\n    eyez = eye[2],\n    upx = up[0],\n    upy = up[1],\n    upz = up[2],\n    centerx = center[0],\n    centery = center[1],\n    centerz = center[2];\n\n  if (\n    Math.abs(eyex - centerx) < 0.000001 &&\n    Math.abs(eyey - centery) < 0.000001 &&\n    Math.abs(eyez - centerz) < 0.000001\n  ) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n    nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 2 * far * near * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  var a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3],\n    a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7],\n    a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11],\n    a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15],\n    b00 = a00 * a11 - a01 * a10,\n    b01 = a00 * a12 - a02 * a10,\n    b02 = a00 * a13 - a03 * a10,\n    b03 = a01 * a12 - a02 * a11,\n    b04 = a01 * a13 - a03 * a11,\n    b05 = a02 * a13 - a03 * a12,\n    b06 = a20 * a31 - a21 * a30,\n    b07 = a20 * a32 - a22 * a30,\n    b08 = a20 * a33 - a23 * a30,\n    b09 = a21 * a32 - a22 * a31,\n    b10 = a21 * a33 - a23 * a31,\n    b11 = a22 * a33 - a23 * a32,\n    // Calculate the determinant\n    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Matrix_math_for_the_web\n// point • matrix\nexport function multiplyPoint(matrix, point) {\n  // Give a simple variable name to each part of the matrix, a column and row number\n  let c0r0 = matrix[0],\n    c1r0 = matrix[1],\n    c2r0 = matrix[2],\n    c3r0 = matrix[3];\n  let c0r1 = matrix[4],\n    c1r1 = matrix[5],\n    c2r1 = matrix[6],\n    c3r1 = matrix[7];\n  let c0r2 = matrix[8],\n    c1r2 = matrix[9],\n    c2r2 = matrix[10],\n    c3r2 = matrix[11];\n  let c0r3 = matrix[12],\n    c1r3 = matrix[13],\n    c2r3 = matrix[14],\n    c3r3 = matrix[15];\n\n  // Now set some simple names for the point\n  let x = point[0];\n  let y = point[1];\n  let z = point[2];\n  let w = point[3];\n\n  // Multiply the point against each part of the 1st column, then add together\n  let resultX = x * c0r0 + y * c0r1 + z * c0r2 + w * c0r3;\n\n  // Multiply the point against each part of the 2nd column, then add together\n  let resultY = x * c1r0 + y * c1r1 + z * c1r2 + w * c1r3;\n\n  // Multiply the point against each part of the 3rd column, then add together\n  let resultZ = x * c2r0 + y * c2r1 + z * c2r2 + w * c2r3;\n\n  // Multiply the point against each part of the 4th column, then add together\n  let resultW = x * c3r0 + y * c3r1 + z * c3r2 + w * c3r3;\n\n  return [resultX, resultY, resultZ, resultW];\n}\n\nexport function normalize(vec) {\n  let [x, y, z] = vec;\n  let len = Math.sqrt(x * x + y * y + z * z);\n  return [x / len, y / len, z / len];\n}\n\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} [dst] optional vec3 to store result. If not passed a new one is created.\n * @return {module:twgl/v3.Vec3} The transformed point.\n * @memberOf module:twgl/m4\n */\nexport function transformPoint(m, v, dst) {\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var d =\n    v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n  dst[0] =\n    (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) /\n    d;\n  dst[1] =\n    (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) /\n    d;\n  dst[2] =\n    (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) /\n    d;\n  return dst;\n}\n","import { base_zoom, start_zoom, zoom_scaler } from \"./constants.js\";\nimport {\n  perspective,\n  lookAt,\n  multiply,\n  invert,\n  multiplyPoint,\n  transformPoint,\n  normalize,\n} from \"./mat4.js\";\n\nexport function setViewports(scene, $render, cols, rows) {\n  let w = Math.floor($render.width / cols);\n  let h = Math.floor($render.height / rows);\n  scene.viewports = [];\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      scene.viewports.push([c * w, r * h, w, h]);\n    }\n  }\n}\n\nexport function initImageMap(scene, cols, rows) {\n  scene.viewport_image_map = [];\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cols; c++) {\n      scene.viewport_image_map.push(null);\n    }\n  }\n}\n\nexport function initCameras(scene) {\n  scene.cameras = [];\n  scene.projection = [];\n  scene.inverse_projection = [];\n  scene.views = [];\n  scene.view_projections = [];\n  scene.inverse_view_projections = [];\n  for (let i = 0; i < scene.viewports.length; i++) {\n    scene.cameras.push([0, 0, start_zoom]);\n    scene.views.push([]);\n    scene.view_projections.push([]);\n    scene.inverse_view_projections.push([]);\n  }\n}\n\nexport function setProjectionMatrices(scene) {\n  if (scene.viewports.length > 0) {\n    let w = scene.viewports[0][2];\n    let h = scene.viewports[0][3];\n    perspective(scene.projection, Math.PI / 3, w / h, 0.01, 100);\n    invert(scene.inverse_projection, scene.projection);\n  }\n}\n\nfunction getLookAt(camera) {\n  return [camera[0], camera[1], 0];\n}\n\nexport function setViewMatrix(scene, i) {\n  let camera = scene.cameras[i];\n  if (scene.views[i]) {\n    lookAt(scene.views[i], camera, getLookAt(camera), [0, 1, 0]);\n    multiply(scene.view_projections[i], scene.projection, scene.views[i]);\n    invert(scene.inverse_view_projections[i], scene.view_projections[i]);\n  }\n}\n\nexport function setViewMatrices(scene) {\n  for (let i = 0; i < scene.cameras.length; i++) {\n    let camera = scene.cameras[i];\n    lookAt(scene.views[i], camera, getLookAt(camera), [0, 1, 0]);\n    multiply(scene.view_projections[i], scene.projection, scene.views[i]);\n    invert(scene.inverse_view_projections[i], scene.view_projections[i]);\n  }\n}\n\nexport function getProjectionZ(scene, world_z) {\n  let projected = multiplyPoint(scene.projection, [0, 0, world_z, 1]);\n  let ndz = projected[2] / projected[3];\n  return ndz;\n}\n\nexport function getWorldFromPx(scene, px, camera_dist) {\n  let z = getProjectionZ(scene, -camera_dist);\n  let raw = [(2 * px) / scene.viewports[0][2], 0, z, 1];\n  let point_world = multiplyPoint(scene.inverse_projection, raw);\n  return point_world[0] / point_world[3];\n}\n\nexport function mosaic(scene, indexes) {\n  let $render = scene.$render;\n  // need matrices to be initialized already\n  if (indexes === undefined) indexes = scene.group;\n  for (let i of indexes) {\n    let [vx, vy, vw, vh] = scene.viewports[i];\n    let camera = scene.cameras[i];\n    let midx = vx + vw / 2;\n    let midy = vy + vh / 2;\n    let difx = midx - $render.width / 2;\n    let dify = midy - $render.height / 2;\n    let w = getWorldFromPx(scene, difx, camera[2]);\n    let h = getWorldFromPx(scene, dify, camera[2]);\n    scene.cameras[i][0] = w;\n    scene.cameras[i][1] = h;\n  }\n}\n\nexport function panSetPixels(scene, x, y) {\n  let indexes = scene.active;\n  for (let index of indexes) {\n    let viewport = scene.viewports[index];\n    let camera = scene.cameras[index];\n    let ndx = getWorldFromPx(scene, x * 8, camera[2]);\n    let ndy = getWorldFromPx(scene, y * 8, camera[2]);\n    scene.cameras[index][0] += ndx;\n    scene.cameras[index][1] += ndy;\n  }\n}\n\nexport function panViewports(scene, dx, dy) {\n  let indexes = scene.active;\n  for (let index of indexes) {\n    let viewport = scene.viewports[index];\n    let camera = scene.cameras[index];\n    let ndx = getWorldFromPx(scene, dx, camera[2]);\n    let ndy = getWorldFromPx(scene, dy, camera[2]);\n    scene.cameras[index][0] -= ndx;\n    scene.cameras[index][1] += ndy;\n  }\n}\n\nexport function getClipsFromMouse(viewport, mouse_position) {\n  let ratio_x = (mouse_position[0] - viewport[0]) / viewport[2];\n  let ratio_y = (mouse_position[1] - viewport[1]) / viewport[3];\n  let clip_x = 2 * ratio_x - 1;\n  let clip_y = 2 * ratio_y - 1;\n  return [clip_x, clip_y];\n}\n\nexport function castRay(scene, index, mouse, world_z) {\n  let viewport = scene.viewports[index];\n  let ndz = getNormalizedZ(scene, index, world_z);\n  let clips = getClipsFromMouse(viewport, mouse);\n  let device_coordinates = [clips[0], clips[1], ndz, 1];\n  let point_world = multiplyPoint(\n    scene.inverse_view_projections[index],\n    device_coordinates\n  );\n  // divide by w at end\n  let world_points = [\n    point_world[0] / point_world[3],\n    point_world[1] / point_world[3],\n  ];\n  return world_points;\n}\n\nfunction zoomLimit(new_zoom) {\n  let max = 100;\n  let min = 0.01;\n  return Math.min(max, Math.max(min, new_zoom));\n}\n\nexport function zoomCenter(scene, sign) {\n  let indexes = scene.active;\n  for (let i of indexes) {\n    let zoom = scene.cameras[i][2];\n    let new_cam;\n    if (sign === 1) {\n      new_cam = scene.cameras[i][2] * zoom_scaler;\n    } else {\n      new_cam = scene.cameras[i][2] / zoom_scaler;\n    }\n    let new_zoom = zoomLimit(new_cam);\n    if (new_zoom > zoom || new_zoom < zoom) {\n      if (scene.zoom_mode === \"canvas\") {\n        let projected = castRay(\n          scene,\n          i,\n          [scene.width / 2, scene.height / 2],\n          new_zoom\n        );\n        scene.cameras[i] = [...projected, new_zoom];\n      } else if (scene.zoom_mode === \"active\") {\n        // TODO figure out if this is what you sant\n        let viewport = scene.viewports[scene.active];\n        let projected = castRay(\n          scene,\n          i,\n          [viewport[0] + viewport[2] / 2, viewport[1] + viewport[3] / 2],\n          new_zoom\n        );\n        scene.cameras[i] = [...projected, new_zoom];\n      } else if (scene.zoom_mode === \"every\") {\n        scene.cameras[i][2] = new_zoom;\n      }\n    }\n  }\n}\n\nexport function getNormalizedZ(scene, index, world_z) {\n  let projected = multiplyPoint(scene.view_projections[index], [\n    0,\n    0,\n    world_z,\n    1,\n  ]);\n  let ndz = projected[2] / projected[3];\n  return ndz;\n}\n\nexport function shake(scene) {\n  let indexes = scene.active;\n  for (let i = 0; i < indexes.length; i++) {\n    let index = indexes[i];\n    let camera = scene.cameras[index];\n    let nx = getWorldFromPx(scene, 16, camera[2]);\n    let dx = 1 - 2 * Math.random();\n    let dy = 1 - 2 * Math.random();\n    scene.cameras[index][0] += dx * nx;\n    scene.cameras[index][1] += dy * nx;\n  }\n}\n\nexport function viewportCenter(scene) {\n  let indexes = scene.active;\n  for (let index of indexes) {\n    scene.cameras[index][0] = 0;\n    scene.cameras[index][1] = 0;\n  }\n}\n\nexport function minMaxOrder(v1, v2) {\n  let min = Math.min(v1, v2);\n  let max = Math.max(v1, v2);\n  return [min, max];\n}\n\nexport function moveGroupWithFocus(group_selected, mactive, cols, rows) {\n  let x1 = group_selected[0] % cols;\n  let y1 = Math.floor(group_selected[0] / cols);\n  let x2 = group_selected[1] % cols;\n  let y2 = Math.floor(group_selected[1] / cols);\n  let mx = mactive % cols;\n  let my = Math.floor(mactive / cols);\n  let start_col = x1;\n  let start_row = y1;\n  let end_col = x2;\n  let end_row = y2;\n  let w = x2 - x1;\n  let h = y2 - y1;\n  if (mx < x1) {\n    start_col = mx;\n    end_col = start_col + w;\n  } else if (mx > x2) {\n    end_col = mx;\n    start_col = end_col - w;\n  }\n  if (my < y1) {\n    start_row = my;\n    end_row = start_row + h;\n  } else if (my > y2) {\n    end_row = my;\n    start_row = end_row - h;\n  }\n  let g1 = start_row * cols + start_col;\n  let g2 = end_row * rows + end_col;\n  return [g1, g2];\n}\n\nexport function resizeGroupWithFocus(group_selected, mactive, cols, rows) {\n  let x1 = group_selected[0] % cols;\n  let y1 = Math.floor(group_selected[0] / cols);\n  let x2 = group_selected[1] % cols;\n  let y2 = Math.floor(group_selected[1] / cols);\n  let mx = mactive % cols;\n  let my = Math.floor(mactive / cols);\n  let start_col = x1;\n  let start_row = y1;\n  let end_col = x2;\n  let end_row = y2;\n  let w = x2 - x1;\n  let h = y2 - y1;\n  if (mx < x1) {\n    start_col = mx;\n  } else if (mx > x2) {\n    end_col = mx;\n  }\n  if (my < y1) {\n    start_row = my;\n  } else if (my > y2) {\n    end_row = my;\n  }\n  let g1 = start_row * cols + start_col;\n  let g2 = end_row * cols + end_col;\n  return [g1, g2];\n}\n\nexport function resizeRelative(group_selected, cols, rows, dx, dy) {\n  let x1 = group_selected[0] % cols;\n  let y1 = Math.floor(group_selected[0] / cols);\n  let x2 = group_selected[1] % cols;\n  let y2 = Math.floor(group_selected[1] / cols);\n  let end_col = Math.min(cols - 1, Math.max(x1, x2 + dx));\n  let end_row = Math.min(rows - 1, Math.max(y1, y2 + dy));\n  return end_row * cols + end_col;\n}\n\nexport function confineActive(group_selected, mactive, cols, rows) {\n  let x1 = group_selected[0] % cols;\n  let y1 = Math.floor(group_selected[0] / cols);\n  let x2 = group_selected[1] % cols;\n  let y2 = Math.floor(group_selected[1] / cols);\n  let mx = mactive % cols;\n  let my = Math.floor(mactive / cols);\n  if (mx < x1) {\n    mx = x1;\n  } else if (mx > x2) {\n    mx = x2;\n  }\n  if (my < y1) {\n    my = y1;\n  } else if (my > y2) {\n    my = y2;\n  }\n  return my * cols + mx;\n}\n\nexport function getGroupIndexes(group, cols, rows) {\n  let x1 = group[0] % cols;\n  let y1 = Math.floor(group[0] / cols);\n  let x2 = group[1] % cols;\n  let y2 = Math.floor(group[1] / cols);\n  let indexes = [];\n  for (let r = 0; r < y2 - y1; r++) {\n    for (let c = 0; c < x2 - x1; c++) {\n      indexes.push(r * cols + c);\n    }\n  }\n  return indexes;\n}\n\nexport function push(scene) {\n  let group = scene.active;\n  let [x1, y1, x2, y2] = getVertices(scene.group, scene.cols, scene.rows);\n  let c1 = x1 + (x2 - x1 + 1) / 2;\n  let c2 = y1 + (y2 - y1 + 1) / 2;\n  for (let index of group) {\n    let c = (index % scene.cols) + 0.5;\n    let r = Math.floor(index / scene.cols) + 0.5;\n    let dx = 0;\n    let dy = 0;\n    if (c1 < c) {\n      dx = -1;\n    } else if (c1 > c) {\n      dx = 1;\n    }\n    if (c2 < r) {\n      dy = -1;\n    } else if (c2 > r) {\n      dy = 1;\n    }\n    let camera = scene.cameras[index];\n    let ndx = getWorldFromPx(scene, dx * 8, camera[2]);\n    let ndy = getWorldFromPx(scene, dy * 8, camera[2]);\n    scene.cameras[index][0] += ndx;\n    scene.cameras[index][1] += ndy;\n  }\n}\n\nexport function pull(scene) {\n  let group = scene.active;\n  let [x1, y1, x2, y2] = getVertices(scene.group, scene.cols, scene.rows);\n  let c1 = x1 + (x2 - x1 + 1) / 2;\n  let c2 = y1 + (y2 - y1 + 1) / 2;\n  for (let index of group) {\n    let c = (index % scene.cols) + 0.5;\n    let r = Math.floor(index / scene.cols) + 0.5;\n    let dx = 0;\n    let dy = 0;\n    if (c1 < c) {\n      dx = 1;\n    } else if (c1 > c) {\n      dx = -1;\n    }\n    if (c2 < r) {\n      dy = 1;\n    } else if (c2 > r) {\n      dy = -1;\n    }\n    let camera = scene.cameras[index];\n    let ndx = getWorldFromPx(scene, dx * 8, camera[2]);\n    let ndy = getWorldFromPx(scene, dy * 8, camera[2]);\n    scene.cameras[index][0] += ndx;\n    scene.cameras[index][1] += ndy;\n  }\n}\n\nexport function resetZoom(scene) {\n  let group = scene.active;\n  for (let index of group) {\n    scene.cameras[index][2] = start_zoom;\n  }\n}\n\nexport function copy(scene) {\n  let group = scene.active;\n  let copy_array = [];\n  for (let index of group) {\n    let camera = scene.cameras[index];\n    let image = scene.viewport_image_map[index];\n    let container = [camera, image];\n    copy_array.push(container);\n  }\n  scene.copy_buffer = copy_array;\n}\n\nexport function paste(scene) {\n  let buffer = scene.copy_buffer;\n  let group = scene.active;\n  if (buffer !== null) {\n    let i = 0;\n    for (let copy of buffer) {\n      let [camera, image] = JSON.parse(JSON.stringify(copy));\n      if (group[i] !== undefined) {\n        let index = group[i];\n        scene.cameras[index] = camera;\n        scene.viewport_image_map[index] = image;\n      }\n      i++;\n    }\n  }\n}\n\nexport function moveVertices(v, dx, dy) {\n  v[0] += dx;\n  v[1] += dy;\n  v[2] += dx;\n  v[3] += dy;\n  return v;\n}\n\nexport function getVertices(group, cols, rows) {\n  let x1 = group[0] % cols;\n  let y1 = Math.floor(group[0] / cols);\n  let x2 = group[1] % cols;\n  let y2 = Math.floor(group[1] / cols);\n  let gx1 = Math.min(x1, x2);\n  let gy1 = Math.min(y1, y2);\n  let gx2 = Math.max(x1, x2);\n  let gy2 = Math.max(y1, y2);\n  return [gx1, gy1, gx2, gy2];\n}\n\nexport function getIndexes(v, cols, rows) {\n  let [gx1, gy1, gx2, gy2] = v;\n  let i1 = gy1 * cols + gx1;\n  let i2 = gy2 * cols + gx2;\n  return [i1, i2];\n}\n\nexport function confineVertices(v, cols, rows) {\n  let [x1, y1, x2, y2] = v;\n  if (x1 < 0) {\n    let diff = -x1;\n    x1 += diff;\n    x2 += diff;\n  }\n  if (x2 > cols - 1) {\n    let diff = x2 - (cols - 1);\n    x1 -= diff;\n    x2 -= diff;\n  }\n  // too wide\n  if (x1 < 0) {\n    x1 = 0;\n  }\n  if (y1 < 0) {\n    let diff = -y1;\n    y1 += diff;\n    y2 += diff;\n  }\n  if (y2 > rows - 1) {\n    let diff = y2 - (rows - 1);\n    y1 -= diff;\n    y2 -= diff;\n  }\n  // too tall\n  if (y1 < 0) {\n    y1 = 0;\n  }\n  return [x1, y1, x2, y2];\n}\n\nexport function moveRelative(group, cols, rows, dx, dy) {\n  let v = moveVertices(getVertices(group, cols, rows), dx, dy);\n  v = confineVertices(v, cols, rows);\n  return getIndexes(v, cols, rows);\n}\n\nexport function confineToCanvas(group, cols, rows) {\n  let v = getVertices(group, cols, rows);\n  v = confineVertices(v, cols, rows);\n  return getIndexes(v, cols, rows);\n}\n\nexport function moveAbsolute(group, cols, rows, index) {\n  let [x1, y1, x2, y2] = getVertices(group, cols, rows);\n  let w = x2 - x1;\n  let h = y2 - y1;\n  let xoff1 = Math.floor(w / 2);\n  let xoff2 = w - xoff1;\n  let yoff1 = Math.floor(h / 2);\n  let yoff2 = h - yoff1;\n  let tar = getVertices([index, index], cols, rows);\n  let nx1 = tar[0] - xoff1;\n  let nx2 = tar[0] + xoff2;\n  let ny1 = tar[1] - yoff1;\n  let ny2 = tar[1] + yoff2;\n  let v = confineVertices([nx1, ny1, nx2, ny2], cols, rows);\n  return getIndexes(v, cols, rows);\n}\n\nexport function addSceneCol(scene, col) {\n  let $render = scene.$render;\n  let copied = [];\n  for (let r = 0; r < scene.rows; r++) {\n    let index = r * scene.cols + col;\n    let camera = scene.cameras[index];\n    let image = scene.viewport_image_map[index];\n    let container = [camera, image];\n    copied.push(container);\n  }\n  scene.cols += 1;\n  setViewports(scene, $render, scene.cols, scene.rows);\n  for (let r = 0; r < scene.rows; r++) {\n    let copy = JSON.parse(JSON.stringify(copied[r]));\n    let index = r * scene.cols + col;\n    scene.viewport_image_map.splice(index, 0, copy[1]);\n    scene.cameras.splice(index, 0, copy[0]);\n    scene.views.splice(index, 0, []);\n    scene.view_projections.splice(index, 0, []);\n    scene.inverse_view_projections.splice(index, 0, []);\n  }\n}\n\nexport function addSceneRow(scene, row) {\n  let $render = scene.$render;\n  let copied = [];\n  for (let c = 0; c < scene.cols; c++) {\n    let index = row * scene.cols + c;\n    let camera = scene.cameras[index];\n    let image = scene.viewport_image_map[index];\n    let container = [camera, image];\n    copied.push(container);\n  }\n  scene.rows += 1;\n  setViewports(scene, $render, scene.cols, scene.rows);\n  for (let c = 0; c < scene.cols; c++) {\n    let copy = JSON.parse(JSON.stringify(copied[c]));\n    let index = row * scene.cols + c;\n    scene.viewport_image_map.splice(index, 0, copy[1]);\n    scene.cameras.splice(index, 0, copy[0]);\n    scene.views.splice(index, 0, []);\n    scene.view_projections.splice(index, 0, []);\n    scene.inverse_view_projections.splice(index, 0, []);\n  }\n}\n\nexport function remSceneCol(scene, col) {\n  let $render = scene.$render;\n  scene.cols -= 1;\n  setViewports(scene, $render, scene.cols, scene.rows);\n  for (let r = 0; r < scene.rows; r++) {\n    let index = r * scene.cols + col;\n    scene.viewport_image_map.splice(index, 1);\n    scene.cameras.splice(index, 1);\n    scene.views.splice(index, 1);\n    scene.view_projections.splice(index, 1);\n    scene.inverse_view_projections.splice(index, 1);\n  }\n}\n\nexport function remSceneRow(scene, row) {\n  let $render = scene.$render;\n  scene.rows -= 1;\n  setViewports(scene, $render, scene.cols, scene.rows);\n  for (let c = 0; c < scene.cols; c++) {\n    // index is different bc it is chopping one each time\n    let index = row * scene.cols;\n    scene.viewport_image_map.splice(index, 1);\n    scene.cameras.splice(index, 1);\n    scene.views.splice(index, 1);\n    scene.view_projections.splice(index, 1);\n    scene.inverse_view_projections.splice(index, 1);\n  }\n}\n","import React from \"react\";\nimport { atom, atomFamily, selector } from \"recoil\";\nimport { getWorldFromPx, castRay } from \"./gl_utils\";\nimport { base_zoom, zoom_scaler } from \"./constants\";\nimport { getID } from \"./App\";\n\nexport let aScene = atom({\n  key: \"scene\",\n  default: {},\n});\n\nexport let aActive = atom({\n  key: \"active\",\n  default: [0, 0, 1, 1],\n});\n\nexport let aMode = atom({\n  key: \"mode\",\n  default: \"normal\",\n});\n\nexport let aSize = atom({\n  key: \"size\",\n  default: [null, null],\n});\n\nexport let aGridSize = atom({\n  key: \"gridSize\",\n  default: [null, null],\n});\n\nexport let aCols = atom({\n  key: \"cols\",\n  default: 4,\n});\n\nexport let aRows = atom({\n  key: \"rows\",\n  default: 2,\n});\n\nexport let aBarHeight = atom({\n  key: \"barHeight\",\n  default: 32,\n});\n\nexport let aSidebarWidth = atom({\n  key: \"sidebarWidth\",\n  default: 320,\n});\n\nexport let aCameras = atom({\n  key: \"cameras\",\n  default: [],\n});\n\nexport let afCamera = atomFamily({\n  key: \"camera\",\n  default: [0, 0, 5],\n});\n\nexport let aImageMap = atom({\n  key: \"imageMap\",\n  default: [],\n});\n\nexport let aImages = atom({\n  key: \"images\",\n  default: [],\n});\n\nexport let sAddImage = selector({\n  key: \"addImage\",\n  set: ({ get, set }, img) => {\n    let imgs = get(aImages);\n    set(aImages, [...imgs, img]);\n  },\n});\n\nfunction constrainActive(active, cols, rows) {\n  let [x, y, w, h] = active;\n  if (w > cols) w = cols;\n  if (h > rows) h = rows;\n  return [minmax(x, 0, cols - w), minmax(y, 0, rows - h), w, h];\n}\n\nfunction minmax(val, min, max) {\n  return Math.max(min, Math.min(max, val));\n}\n\nexport let sActiveSelector = selector({\n  key: \"activeSelector\",\n  set: ({ get, set }, new_value) => {\n    set(aActive, constrainActive(new_value, get(aCols), get(aRows)));\n  },\n});\n\nexport let sSelectAll = selector({\n  key: \"selectAll\",\n  set: ({ get, set }, new_value) => {\n    set(aActive, [0, 0, get(aCols), get(aRows)]);\n  },\n});\n\nexport let sMoveActiveSelector = selector({\n  key: \"moveActiveSelector\",\n  set: ({ get, set }, diff) => {\n    let [x, y, w, h] = get(aActive);\n    let [dx, dy] = diff;\n    set(sActiveSelector, [x + dx, y + dy, w, h]);\n  },\n});\n\nfunction constrainResize(active, cols, rows) {\n  let [x, y, w, h] = active;\n  let wlimit = cols - active[0];\n  let hlimit = rows - active[1];\n  return [x, y, minmax(w, 1, wlimit), minmax(h, 1, hlimit)];\n}\n\nexport let sResizeActiveSelector = selector({\n  key: \"resizeActiveSelector\",\n  set: ({ get, set }, diff) => {\n    let [x, y, w, h] = get(aActive);\n    let [dx, dy] = diff;\n    let new_value = [x, y, w + dx, h + dy];\n    set(aActive, constrainResize(new_value, get(aCols), get(aRows)));\n  },\n});\n\nexport let sViewports = selector({\n  key: \"viewports\",\n  get: ({ get }) => {\n    let [w, h] = get(aGridSize);\n    let cols = get(aCols);\n    let rows = get(aRows);\n    let vw = Math.floor(w / cols);\n    let vh = Math.floor(h / rows);\n    return [...Array(cols * rows)].map((_, i) => {\n      let c = i % cols;\n      let r = Math.floor(i / cols);\n      return [c * vw, r * vh, vw, vh];\n    });\n  },\n});\n\nexport let sPanCamera = selector({\n  key: \"panCamera\",\n  set: ({ get, set }, { scene, diff }) => {\n    let [dx, dy] = diff;\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let [x, y, w, h] = get(aActive);\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        let ndx = getWorldFromPx(scene, dx, new_camera[2]);\n        let ndy = getWorldFromPx(scene, dy, new_camera[2]);\n        new_camera[0] -= ndx;\n        new_camera[1] += ndy;\n        set(afCamera(id), new_camera);\n      }\n    }\n  },\n});\n\nexport let sActiveEscape = selector({\n  key: \"activeEscape\",\n  set: ({ get, set }) => {\n    let [x, y, w, h] = get(aActive);\n    set(aActive, [x, y, 1, 1]);\n  },\n});\n\nexport let sResetZoom = selector({\n  key: \"resetZoom\",\n  set: ({ get, set }) => {\n    console.log(\"reset zoom\");\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let [x, y, w, h] = get(aActive);\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        new_camera[2] = base_zoom;\n        set(afCamera(id), new_camera);\n      }\n    }\n  },\n});\n\nexport let sAllCameras = selector({\n  key: \"allCameras\",\n  get: ({ get }) => {\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let rows = get(aRows);\n    let expandedCameras = [];\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < cols; c++) {\n        let index = r * cols + c;\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        expandedCameras.push(camera);\n      }\n    }\n    return expandedCameras;\n  },\n});\n\nexport let sMosaicCamera = selector({\n  key: \"mosaicCamera\",\n  set: ({ get, set }, { scene, active }) => {\n    let cameras = get(aCameras);\n    let viewports = get(sViewports);\n    let [gw, gh] = get(aGridSize);\n    let cols = get(aCols);\n    let rows = get(aRows);\n    let get_active;\n    if (active === undefined) {\n      get_active = get(aActive);\n    } else {\n      get_active = active;\n    }\n    let [x, y, w, h] = get_active;\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let inverted = (rows - 1 - (y + r)) * cols + (x + c);\n        let id = cameras[index];\n        let [vx, vy, vw, vh] = viewports[inverted];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        let midx = vx + vw / 2;\n        let midy = vy + vh / 2;\n        let difx = midx - gw / 2;\n        let dify = midy - gh / 2;\n        let w = getWorldFromPx(scene, difx, new_camera[2]);\n        let h = getWorldFromPx(scene, dify, new_camera[2]);\n        new_camera[0] = w;\n        new_camera[1] = h;\n        set(afCamera(id), new_camera);\n      }\n    }\n  },\n});\n\nexport let sShakeCamera = selector({\n  key: \"shakeCamera\",\n  set: ({ get, set }, { scene, active }) => {\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let get_active;\n    if (active === undefined) {\n      get_active = get(aActive);\n    } else {\n      get_active = active;\n    }\n    let [x, y, w, h] = get_active;\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        let nd = getWorldFromPx(scene, 24, new_camera[2]);\n        let dx = 0 - nd / 2 + Math.random() * nd;\n        let dy = 0 - nd / 2 + Math.random() * nd;\n        new_camera[0] += dx;\n        new_camera[1] += dy;\n        set(afCamera(id), new_camera);\n      }\n    }\n  },\n});\n\nexport let sPushCameras = selector({\n  key: \"pushCameras\",\n  set: ({ get, set }, { scene, active }) => {\n    let [x, y, w, h] = get(aActive);\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let c1 = x + w / 2;\n    let c2 = y + h / 2;\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        let dx = 0;\n        let dy = 0;\n        if (c1 < c + x + 0.5) {\n          dx = -1;\n        } else if (c1 > c + x + 0.5) {\n          dx = 1;\n        }\n        if (c2 < r + y + 0.5) {\n          dy = 1;\n        } else if (c2 > r + y + 0.5) {\n          dy = -1;\n        }\n        let ndx = getWorldFromPx(scene, dx * 8, camera[2]);\n        let ndy = getWorldFromPx(scene, dy * 8, camera[2]);\n        new_camera[0] += ndx;\n        new_camera[1] += ndy;\n        set(afCamera(id), new_camera);\n      }\n    }\n  },\n});\n\nexport let sPullCameras = selector({\n  key: \"pullCameras\",\n  set: ({ get, set }, { scene, active }) => {\n    let [x, y, w, h] = get(aActive);\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let c1 = x + w / 2;\n    let c2 = y + h / 2;\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        let dx = 0;\n        let dy = 0;\n        if (c1 < c + x + 0.5) {\n          dx = 1;\n        } else if (c1 > c + x + 0.5) {\n          dx = -1;\n        }\n        if (c2 < r + y + 0.5) {\n          dy = -1;\n        } else if (c2 > r + y + 0.5) {\n          dy = 1;\n        }\n        let ndx = getWorldFromPx(scene, dx * 8, camera[2]);\n        let ndy = getWorldFromPx(scene, dy * 8, camera[2]);\n        new_camera[0] += ndx;\n        new_camera[1] += ndy;\n        set(afCamera(id), new_camera);\n      }\n    }\n  },\n});\n\nexport let sShatterCamera = selector({\n  key: \"shatterCamera\",\n  set: ({ get, set }, scene) => {\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let rows = get(aRows);\n    let [x, y, w, h] = get(aActive);\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        new_camera[0] = 0;\n        new_camera[1] = 0;\n        set(afCamera(id), new_camera);\n      }\n    }\n  },\n});\n\nexport let sSetImageMap = selector({\n  key: \"setImageMap\",\n  set: ({ get, set }, { active }) => {\n    let cols = get(aCols);\n    let rows = get(aRows);\n    let get_active;\n    if (active === undefined) {\n      get_active = get(aActive);\n    } else {\n      get_active = active;\n    }\n    let [x, y, w, h] = get_active;\n    let images = get(aImages);\n    let new_map = get(aImageMap).slice();\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let inverted = (rows - 1 - (y + r)) * cols + (x + c);\n        new_map[inverted] = images.length - 1;\n      }\n    }\n    set(aImageMap, new_map);\n  },\n});\n\nfunction zoomLimit(new_zoom) {\n  let max = 100;\n  let min = 0.01;\n  return Math.min(max, Math.max(min, new_zoom));\n}\n\nexport let aZoomMode = atom({\n  key: \"zoomMode\",\n  default: \"canvas\",\n});\n\nexport let sZoomCamera = selector({\n  key: \"zoomCamera\",\n  set: ({ get, set }, { scene, sign }) => {\n    let cameras = get(aCameras);\n    let cols = get(aCols);\n    let rows = get(aRows);\n    let [x, y, w, h] = get(aActive);\n    let [gw, gh] = get(aGridSize);\n    let zoomMode = get(aZoomMode);\n    for (let r = 0; r < h; r++) {\n      for (let c = 0; c < w; c++) {\n        let index = (y + r) * cols + (x + c);\n        let inverted = (rows - 1 - (y + r)) * cols + (x + c);\n        let id = cameras[index];\n        let camera = get(afCamera(id));\n        let new_camera = camera.slice();\n        let zoom = new_camera[2];\n        let new_poss;\n        if (sign === 1) {\n          new_poss = zoom * zoom_scaler;\n        } else {\n          new_poss = zoom / zoom_scaler;\n        }\n        let new_zoom = zoomLimit(new_poss);\n        if (new_zoom > zoom || new_zoom < zoom) {\n          if (zoomMode === \"canvas\") {\n            let projected = castRay(\n              scene,\n              inverted,\n              [gw / 2, gh / 2],\n              new_zoom\n            );\n            new_camera = [...projected, new_zoom];\n          } else {\n            new_camera[2] = new_zoom;\n          }\n          set(afCamera(id), new_camera);\n        }\n      }\n    }\n  },\n});\n\nexport let sAddCol = selector({\n  key: \"addCol\",\n  set: ({ get, set }) => {\n    let cols = get(aCols);\n    let rows = get(aRows);\n    if (cols < 16) {\n      let [x, y, w, h] = get(aActive);\n      let insertCol = x + w;\n      let lastCol = insertCol - 1;\n\n      let imageMap = get(aImageMap);\n      let mapCols = [...Array(cols)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          mapCols[c].push(imageMap[index]);\n        }\n      }\n      let copyCol = mapCols[lastCol].slice();\n      mapCols.splice(insertCol, 0, copyCol);\n      let recombinedMap = [];\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < mapCols.length; c++) {\n          recombinedMap.push(mapCols[c][r]);\n        }\n      }\n\n      let cameras = get(aCameras);\n      let cameraCols = [...Array(cols)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          cameraCols[c].push(cameras[index]);\n        }\n      }\n      let copyCameras = cameraCols[lastCol].slice();\n      let newCol = [];\n      for (let r = 0; r < rows; r++) {\n        let id = getID();\n        let copyID = copyCameras[r];\n        let cloneCamera = get(afCamera(copyID)).slice();\n        set(afCamera(id), cloneCamera);\n        newCol.push(id);\n      }\n      cameraCols.splice(insertCol, 0, newCol);\n      let recombinedCameras = [];\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cameraCols.length; c++) {\n          recombinedCameras.push(cameraCols[c][r]);\n        }\n      }\n\n      set(aCameras, recombinedCameras);\n      set(aImageMap, recombinedMap);\n      set(aCols, cols + 1);\n    }\n  },\n});\n\nexport let sRemCol = selector({\n  key: \"remCol\",\n  set: ({ get, set }) => {\n    let cols = get(aCols);\n    let rows = get(aRows);\n    if (cols > 1) {\n      let [x, y, w, h] = get(aActive);\n      let firstCol = x;\n\n      let imageMap = get(aImageMap);\n      let mapCols = [...Array(cols)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          mapCols[c].push(imageMap[index]);\n        }\n      }\n      mapCols.splice(firstCol, 1);\n      let recombinedMap = [];\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < mapCols.length; c++) {\n          recombinedMap.push(mapCols[c][r]);\n        }\n      }\n\n      let cameras = get(aCameras);\n      let cameraCols = [...Array(cols)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          cameraCols[c].push(cameras[index]);\n        }\n      }\n      cameraCols.splice(firstCol, 1);\n      let recombinedCameras = [];\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cameraCols.length; c++) {\n          recombinedCameras.push(cameraCols[c][r]);\n        }\n      }\n\n      set(aCameras, recombinedCameras);\n      set(aImageMap, recombinedMap);\n      set(aCols, cols - 1);\n      set(aActive, constrainActive([x - 1, y, w, h], cols - 1, rows));\n    }\n  },\n});\n\nexport let sAddRow = selector({\n  key: \"addRow\",\n  set: ({ get, set }) => {\n    let cols = get(aCols);\n    let rows = get(aRows);\n    if (rows < 16) {\n      let [x, y, w, h] = get(aActive);\n      let insertRow = y + h;\n      let lastRow = insertRow - 1;\n\n      let imageMap = get(aImageMap);\n      let mapRows = [...Array(rows)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          mapRows[r].push(imageMap[index]);\n        }\n      }\n      let copyRow = mapRows[lastRow].slice();\n      mapRows.splice(insertRow, 0, copyRow);\n      let recombinedMap = [];\n      for (let r = 0; r < mapRows.length; r++) {\n        for (let c = 0; c < cols; c++) {\n          recombinedMap.push(mapRows[r][c]);\n        }\n      }\n\n      let cameras = get(aCameras);\n      let cameraRows = [...Array(rows)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          cameraRows[r].push(cameras[index]);\n        }\n      }\n      let copyCameras = cameraRows[lastRow].slice();\n      let newRow = [];\n      for (let c = 0; c < cols; c++) {\n        let id = getID();\n        let copyID = copyCameras[c];\n        let cloneCamera = get(afCamera(copyID)).slice();\n        set(afCamera(id), cloneCamera);\n        newRow.push(id);\n      }\n      cameraRows.splice(insertRow, 0, newRow);\n      let recombinedCameras = [];\n      for (let r = 0; r < cameraRows.length; r++) {\n        for (let c = 0; c < cols; c++) {\n          recombinedCameras.push(cameraRows[r][c]);\n        }\n      }\n\n      set(aCameras, recombinedCameras);\n      set(aImageMap, recombinedMap);\n      set(aRows, rows + 1);\n    }\n  },\n});\n\nexport let sRemRow = selector({\n  key: \"remRoww\",\n  set: ({ get, set }) => {\n    let cols = get(aCols);\n    let rows = get(aRows);\n    if (rows > 1) {\n      let [x, y, w, h] = get(aActive);\n      let firstRow = y;\n\n      let imageMap = get(aImageMap);\n      let mapRows = [...Array(rows)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          mapRows[r].push(imageMap[index]);\n        }\n      }\n      mapRows.splice(firstRow, 1);\n      let recombinedMap = [];\n      for (let r = 0; r < mapRows.length; r++) {\n        for (let c = 0; c < cols; c++) {\n          recombinedMap.push(mapRows[r][c]);\n        }\n      }\n\n      let cameras = get(aCameras);\n      let cameraRows = [...Array(rows)].map((n) => []);\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          cameraRows[r].push(cameras[index]);\n        }\n      }\n      cameraRows.splice(firstRow, 1);\n      let recombinedCameras = [];\n      for (let r = 0; r < cameraRows.length; r++) {\n        for (let c = 0; c < cols; c++) {\n          recombinedCameras.push(cameraRows[r][c]);\n        }\n      }\n\n      set(aCameras, recombinedCameras);\n      set(aImageMap, recombinedMap);\n      set(aRows, rows - 1);\n      set(aActive, constrainActive([x - 1, y, w, h], cols, rows - 1));\n    }\n  },\n});\n","import { useEffect, useRef, useState } from \"react\";\nimport {\n  RecoilRoot,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport {\n  aMode,\n  sMoveActiveSelector,\n  sResizeActiveSelector,\n  sPanCamera,\n  sZoomCamera,\n  sMosaicCamera,\n  sShatterCamera,\n  sSelectAll,\n  sShakeCamera,\n  sPushCameras,\n  sPullCameras,\n  sAddCol,\n  sRemCol,\n  sAddRow,\n  sRemRow,\n  sResetZoom,\n  sActiveEscape,\n  sAddImage,\n  sSetImageMap,\n} from \"./State.js\";\nimport { useUndo, useRedo } from \"recoil-undo\";\nimport { domLoadImage } from \"./App\";\n\nfunction Keyboard({ scene_ref, input_ref }) {\n  let [mode, setMode] = useRecoilState(aMode);\n  let moveActive = useSetRecoilState(sMoveActiveSelector);\n  let resizeActive = useSetRecoilState(sResizeActiveSelector);\n  let zoomCamera = useSetRecoilState(sZoomCamera);\n  let panCamera = useSetRecoilState(sPanCamera);\n  let mosaicCamera = useSetRecoilState(sMosaicCamera);\n  let shatterCamera = useSetRecoilState(sShatterCamera);\n  let shakeCamera = useSetRecoilState(sShakeCamera);\n  let pushCameras = useSetRecoilState(sPushCameras);\n  let pullCameras = useSetRecoilState(sPullCameras);\n  let selectAll = useSetRecoilState(sSelectAll);\n  let addCol = useSetRecoilState(sAddCol);\n  let remCol = useSetRecoilState(sRemCol);\n  let addRow = useSetRecoilState(sAddRow);\n  let remRow = useSetRecoilState(sRemRow);\n  let resetZoom = useSetRecoilState(sResetZoom);\n  let activeEscape = useSetRecoilState(sActiveEscape);\n  let addImage = useSetRecoilState(sAddImage);\n  let setImageMap = useSetRecoilState(sSetImageMap);\n  let km_ref = useRef({});\n  let undo = useUndo();\n  let redo = useRedo();\n\n  useEffect(() => {\n    let km = km_ref.current;\n    let scene = scene_ref.current;\n    let input = input_ref.current;\n    function pressed(press, e) {\n      if (km.z) undo();\n      if (km.x) redo();\n\n      if (mode === \"normal\") {\n        if (km.h) moveActive([-1, 0]);\n        if (km.j) moveActive([0, 1]);\n        if (km.k) moveActive([0, -1]);\n        if (km.l) moveActive([1, 0]);\n\n        if (km.arrowleft) panCamera({ scene, diff: [-8, 0] });\n        if (km.arrowright) panCamera({ scene, diff: [8, 0] });\n        if (km.arrowup) panCamera({ scene, diff: [0, -8] });\n        if (km.arrowdown) panCamera({ scene, diff: [0, 8] });\n\n        if (km[\"-\"]) zoomCamera({ scene, sign: 1 });\n        if (km[\"+\"]) zoomCamera({ scene, sign: -1 });\n        if (km[\"=\"]) zoomCamera({ scene, sign: -1 });\n\n        if (km.s) shakeCamera({ scene });\n        if (km.u) pushCameras({ scene });\n        if (km.y) pullCameras({ scene });\n        if (km.i) resetZoom();\n\n        if (km.d) remCol();\n        if (km.f) addCol();\n        if (km.v) remRow();\n        if (km.b) addRow();\n\n        if (press === \"o\")\n          domLoadImage(scene, input, addImage, setImageMap.bind(null, {}));\n        if (press === \"escape\") activeEscape();\n        if (press === \"r\") setMode(\"resize\");\n        if (press === \"a\") selectAll();\n        if (press === \"m\") mosaicCamera({ scene });\n        if (press === \"n\") shatterCamera(scene);\n      } else if (mode === \"resize\") {\n        if (km.h) resizeActive([-1, 0]);\n        if (km.j) resizeActive([0, 1]);\n        if (km.k) resizeActive([0, -1]);\n        if (km.l) resizeActive([1, 0]);\n\n        if (press === \"escape\") activeEscape();\n        if (press === \"a\") selectAll();\n        if (press === \"r\") setMode(\"normal\");\n        if (km.enter) setMode(\"normal\");\n      }\n    }\n\n    function downHandler(e) {\n      let press = e.key.toLowerCase();\n      km[press] = true;\n      pressed(press, e);\n    }\n\n    function upHandler(e) {\n      let press = e.key.toLowerCase();\n      km[press] = false;\n    }\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [mode]);\n\n  return null;\n}\n\nexport default Keyboard;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  RecoilRoot,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { draw } from \"./Gl.js\";\nimport {\n  aActive,\n  sViewports,\n  sPanCamera,\n  aCols,\n  sActiveSelector,\n  sZoomCamera,\n} from \"./State.js\";\nimport { useBatching } from \"recoil-undo\";\n\nfunction Mouse({ canvas_ref, scene_ref }) {\n  let mouse_ref = useRef({\n    raw: [0, 0],\n    down: false,\n    drag_start: null,\n  });\n  let batch_ref = useRef(false);\n  let viewports = useRecoilValue(sViewports);\n  let panCamera = useSetRecoilState(sPanCamera);\n  let active = useRecoilValue(aActive);\n  let cols = useRecoilValue(aCols);\n  let setActive = useSetRecoilState(sActiveSelector);\n  let zoomCamera = useSetRecoilState(sZoomCamera);\n  let { startBatch, endBatch } = useBatching();\n\n  useEffect(() => {\n    function getViewportFromMouse(mouse_raw) {\n      let [mx, my] = mouse_raw;\n      for (let i = 0; i < viewports.length; i++) {\n        let viewport = viewports[i];\n        let [x, y, w, h] = viewport;\n        let col = i % cols;\n        let row = Math.floor(i / cols);\n        if (mx >= x && mx <= x + w && my >= y && my <= y + h) {\n          return [col, row];\n        }\n      }\n    }\n\n    let canvas = canvas_ref.current;\n    let mouse = mouse_ref.current;\n    let scene = scene_ref.current;\n\n    function mouseMove(e) {\n      if (mouse.down) {\n        let dx = e.clientX - mouse.raw[0];\n        let dy = e.clientY - mouse.raw[1];\n        panCamera({ scene, diff: [dx, dy] });\n      }\n      mouse.raw = [e.clientX, e.clientY];\n    }\n    function mouseDown(e) {\n      // startBatch();\n      mouse.raw = [e.clientX, e.clientY];\n      let [ax, ay, aw, ah] = active;\n      let [mcol, mrow] = getViewportFromMouse(mouse.raw);\n      if (mcol >= ax && mcol < ax + aw && mrow >= ay && mrow < ay + ah) {\n        batch_ref.current = true;\n        mouse.down = true;\n      } else {\n        setActive([\n          mcol - Math.floor((aw - 1) / 2),\n          mrow - Math.floor((ah - 1) / 2),\n          aw,\n          ah,\n        ]);\n        batch_ref.current = true;\n        mouse.down = true;\n      }\n      canvas.setPointerCapture(e.pointerId);\n    }\n    function mouseUp(e) {\n      // endBatch();\n      mouse.down = false;\n      canvas.releasePointerCapture(e.pointerId);\n    }\n    function mouseWheel(e) {\n      e.preventDefault();\n\n      let sign = e.deltaY < 0 ? -1 : 1;\n      zoomCamera({ scene, sign });\n    }\n\n    canvas.addEventListener(\"mousemove\", mouseMove);\n    canvas.addEventListener(\"pointerdown\", mouseDown);\n    canvas.addEventListener(\"pointerup\", mouseUp);\n    canvas.addEventListener(\"wheel\", mouseWheel, { passive: false });\n    return () => {\n      canvas.removeEventListener(\"mousemove\", mouseMove);\n      canvas.removeEventListener(\"pointerdown\", mouseDown);\n      canvas.removeEventListener(\"pointerup\", mouseUp);\n      canvas.removeEventListener(\"wheel\", mouseWheel);\n    };\n  }, [viewports, canvas_ref, active, cols]);\n\n  return null;\n}\n\nexport default Mouse;\n","import { useEffect, useRef, useState } from \"react\";\nimport {\n  aActive,\n  aSize,\n  aGridSize,\n  sViewports,\n  aCols,\n  aRows,\n  aMode,\n  aBarHeight,\n  aSidebar,\n  aCameras,\n  afCamera,\n  aImages,\n  sAddImage,\n  aImageMap,\n  sSetImageMap,\n  aSidebarWidth,\n  sMosaicCamera,\n  sAllCameras,\n  sMoveActiveSelector,\n  sResizeActiveSelector,\n  sPanCamera,\n  sZoomCamera,\n  sShatterCamera,\n  sSelectAll,\n  sShakeCamera,\n  sPushCameras,\n  sPullCameras,\n  sAddCol,\n  sRemCol,\n  sAddRow,\n  sRemRow,\n  sResetZoom,\n  sActiveEscape,\n  aZoomMode,\n} from \"./State.js\";\nimport { domLoadImage } from \"./App\";\nimport {\n  RecoilRoot,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport { useUndo, useRedo } from \"recoil-undo\";\n\nfunction Heading(props) {\n  return (\n    <div className=\"heading\" style={{ marginBottom: 8 }}>\n      {props.children.toUpperCase()}\n    </div>\n  );\n}\n\nfunction Info(props) {\n  return <div style={{ marginBottom: 8 }}>{props.children}</div>;\n}\n\nfunction Tip(props) {\n  return <div style={{ marginBottom: 8, color: \"#aaa\" }}>{props.children}</div>;\n}\n\nfunction Spacer() {\n  return <div style={{ width: \"100%\", height: 8 }}></div>;\n}\n\nfunction HSpacer() {\n  return <div style={{ width: \"100%\", height: 4 }}></div>;\n}\n\nfunction Sidebar({ scene_ref, input_ref }) {\n  let sidebarWidth = useRecoilValue(aSidebarWidth);\n  let [mode, setMode] = useRecoilState(aMode);\n  let [zoomMode, setZoomMode] = useRecoilState(aZoomMode);\n  let moveActive = useSetRecoilState(sMoveActiveSelector);\n  let resizeActive = useSetRecoilState(sResizeActiveSelector);\n  let zoomCamera = useSetRecoilState(sZoomCamera);\n  let panCamera = useSetRecoilState(sPanCamera);\n  let mosaicCamera = useSetRecoilState(sMosaicCamera);\n  let shatterCamera = useSetRecoilState(sShatterCamera);\n  let shakeCamera = useSetRecoilState(sShakeCamera);\n  let pushCameras = useSetRecoilState(sPushCameras);\n  let pullCameras = useSetRecoilState(sPullCameras);\n  let selectAll = useSetRecoilState(sSelectAll);\n  let addCol = useSetRecoilState(sAddCol);\n  let remCol = useSetRecoilState(sRemCol);\n  let addRow = useSetRecoilState(sAddRow);\n  let remRow = useSetRecoilState(sRemRow);\n  let resetZoom = useSetRecoilState(sResetZoom);\n  let activeEscape = useSetRecoilState(sActiveEscape);\n  let addImage = useSetRecoilState(sAddImage);\n  let setImageMap = useSetRecoilState(sSetImageMap);\n  let km_ref = useRef({});\n  let undo = useUndo();\n  let redo = useRedo();\n\n  let resize = mode === \"resize\";\n  let scene = scene_ref.current;\n  let input = input_ref.current;\n\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        right: 0,\n        height: \"100%\",\n        top: 0,\n        width: sidebarWidth,\n        overflow: \"auto\",\n      }}\n    >\n      <div\n        style={{\n          padding: 16,\n        }}\n      >\n        {resize ? (\n          <div>\n            <Heading>Resize selection mode</Heading>\n            <div>\n              <ToggleKeyButton\n                text=\"Resize selection\"\n                keyname=\"r\"\n                compare={resize}\n                click={setMode.bind(null, \"normal\")}\n              />\n            </div>\n            <Info>Click and drag cells or use</Info>\n            <div>\n              <TwoKeyButton\n                text=\"narrower\"\n                keyname1=\"←\"\n                keyname2=\"h\"\n                click={resizeActive.bind(null, [-1, 0])}\n              />\n            </div>\n            <div>\n              <TwoKeyButton\n                text=\"wider\"\n                keyname1=\"→\"\n                keyname2=\"l\"\n                click={resizeActive.bind(null, [-1, 0])}\n              />\n            </div>\n            <div>\n              <TwoKeyButton\n                text=\"shorter\"\n                keyname1=\"↑\"\n                keyname2=\"k\"\n                click={resizeActive.bind(null, [0, -1])}\n              />\n            </div>\n            <div>\n              <TwoKeyButton\n                text=\"taller\"\n                keyname1=\"↓\"\n                keyname2=\"j\"\n                click={resizeActive.bind(null, [0, 1])}\n              />\n            </div>\n            <Info>Finish</Info>\n            <div>\n              <KeyButton\n                text=\"End resize\"\n                keyname=\"enter\"\n                click={setMode.bind(null, \"normal\")}\n              />\n            </div>\n            <Tip>\n              <div>TIP:</div>When resizing with the keyboard controls, the top\n              left corner of the selection is locked to its position.\n            </Tip>\n          </div>\n        ) : (\n          <div>\n            <Heading>Select</Heading>\n            <div>\n              <Info>Click a cell or move with</Info>\n              <KeyButton\n                text=\"←\"\n                keyname=\"h\"\n                click={moveActive.bind(null, [-1, 0])}\n              />\n              <KeyButton\n                text=\"↓\"\n                keyname=\"j\"\n                click={moveActive.bind(null, [0, 1])}\n              />\n              <KeyButton\n                text=\"↑\"\n                keyname=\"k\"\n                click={moveActive.bind(null, [0, -1])}\n              />\n              <KeyButton\n                text=\"→\"\n                keyname=\"l\"\n                click={moveActive.bind(null, [1, 0])}\n              />\n            </div>\n            <Info>Change selection size</Info>\n            <div>\n              <ToggleKeyButton\n                text=\"Resize selection\"\n                keyname=\"r\"\n                compare={resize}\n                click={setMode.bind(null, \"resize\")}\n              />\n              <div>\n                <KeyButton text=\"Select all\" keyname=\"a\" click={selectAll} />\n                <KeyButton text=\"Clear\" keyname=\"escape\" click={activeEscape} />\n              </div>\n            </div>\n            <HSpacer />\n            <Heading>Pan</Heading>\n            <Info>Click and drag or use</Info>\n            <div>\n              <KeyButton\n                text=\"\"\n                keyname=\"←\"\n                click={panCamera.bind(null, { scene, diff: [1, 0] })}\n              />\n              <KeyButton\n                text=\"\"\n                keyname=\"↓\"\n                click={panCamera.bind(null, { scene, diff: [0, 1] })}\n              />\n              <KeyButton\n                text=\"\"\n                keyname=\"↑\"\n                click={panCamera.bind(null, { scene, diff: [0, -1] })}\n              />\n              <KeyButton\n                text=\"\"\n                keyname=\"→\"\n                click={panCamera.bind(null, { scene, diff: [-1, 0] })}\n              />\n            </div>\n            <HSpacer />\n            <Heading>Zoom</Heading>\n            <Info>Scroll or use</Info>\n            <div>\n              <KeyButton\n                text=\"In\"\n                keyname=\"+\"\n                click={zoomCamera.bind(null, { scene, sign: -1 })}\n              />\n              <KeyButton\n                text=\"Out\"\n                keyname=\"-\"\n                click={zoomCamera.bind(null, { scene, sign: 1 })}\n              />\n            </div>\n            <Info>Zoom center</Info>\n            <div>\n              <ToggleKeyButton\n                text=\"Canvas\"\n                keyname=\"z\"\n                compare={zoomMode === \"canvas\"}\n                click={setZoomMode.bind(null, \"canvas\")}\n              />\n              <ToggleKeyButton\n                text=\"Individual\"\n                keyname=\"i\"\n                compare={zoomMode === \"individual\"}\n                click={setZoomMode.bind(null, \"individual\")}\n              />\n            </div>\n            <HSpacer />\n            <Heading>Load image to selection</Heading>\n            <KeyButtonOnce\n              text=\"Load image\"\n              keyname=\"o\"\n              click={domLoadImage.bind(\n                null,\n                scene,\n                input,\n                addImage,\n                setImageMap.bind(null, {})\n              )}\n            />\n            <HSpacer />\n            <Heading>More actions</Heading>\n            <KeyButton\n              text=\"Shatter\"\n              keyname=\"y\"\n              click={shatterCamera.bind(null, { scene })}\n            />\n            <KeyButton\n              text=\"Mosaic\"\n              keyname=\"u\"\n              click={mosaicCamera.bind(null, { scene })}\n            />\n            <KeyButton\n              text=\"Shake\"\n              keyname=\"t\"\n              click={shakeCamera.bind(null, { scene })}\n            />\n            <KeyButton\n              text=\"Push\"\n              keyname=\"n\"\n              click={pushCameras.bind(null, { scene })}\n            />\n            <KeyButton\n              text=\"Pull\"\n              keyname=\"m\"\n              click={pullCameras.bind(null, { scene })}\n            />\n            <KeyButton\n              text=\"Reset zoom\"\n              keyname=\"i\"\n              click={resetZoom.bind(null, scene)}\n            />\n            <HSpacer />\n            <Heading>View</Heading>\n            <ToggleKeyButton\n              text=\"Show grid\"\n              keyname=\"r\"\n              compare={resize}\n              click={setMode.bind(null, \"resize\")}\n            />\n            <ToggleKeyButton\n              text=\"Show camera positions\"\n              keyname=\"r\"\n              compare={resize}\n              click={setMode.bind(null, \"resize\")}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n\nfunction KeyButton(props) {\n  let $button_ref = useRef(null);\n  let { text, click, keyname } = props;\n\n  useEffect(() => {\n    let $button = $button_ref.current;\n    let time;\n    let interval;\n    function runInterval() {\n      interval = setInterval(click, 60);\n    }\n    function pointerDown(e) {\n      $button.setPointerCapture(e.pointerId);\n      time = setTimeout(runInterval, 250);\n      click();\n    }\n    function pointerUp(e) {\n      $button.releasePointerCapture(e.pointerId);\n      clearTimeout(time);\n      clearInterval(interval);\n    }\n    $button.addEventListener(\"pointerdown\", pointerDown);\n    $button.addEventListener(\"pointerup\", pointerUp);\n    return () => {\n      $button.removeEventListener(\"pointerdown\", pointerDown);\n      $button.removeEventListener(\"pointerup\", pointerUp);\n    };\n  }, []);\n\n  return (\n    <div ref={$button_ref} className=\"button\" role=\"button\">\n      {text !== \"\" ? text + \" \" : \"\"}\n      <span className=\"keyname\">{keyname}</span>\n    </div>\n  );\n}\n\nfunction KeyButtonOnce(props) {\n  let $button_ref = useRef(null);\n  let { text, click, keyname } = props;\n\n  return (\n    <div ref={$button_ref} className=\"button\" role=\"button\" onClick={click}>\n      {text !== \"\" ? text + \" \" : \"\"}\n      <span className=\"keyname\">{keyname}</span>\n    </div>\n  );\n}\n\nfunction TwoKeyButton(props) {\n  let $button_ref = useRef(null);\n  let { text, click, keyname1, keyname2 } = props;\n\n  useEffect(() => {\n    let $button = $button_ref.current;\n    let time;\n    let interval;\n    function runInterval() {\n      interval = setInterval(click, 60);\n    }\n    function pointerDown(e) {\n      $button.setPointerCapture(e.pointerId);\n      time = setTimeout(runInterval, 250);\n      click();\n    }\n    function pointerUp(e) {\n      $button.releasePointerCapture(e.pointerId);\n      clearTimeout(time);\n      clearInterval(interval);\n    }\n    $button.addEventListener(\"pointerdown\", pointerDown);\n    $button.addEventListener(\"pointerup\", pointerUp);\n    return () => {\n      $button.removeEventListener(\"pointerdown\", pointerDown);\n      $button.removeEventListener(\"pointerup\", pointerUp);\n    };\n  }, []);\n\n  return (\n    <div ref={$button_ref} className=\"button\" role=\"button\">\n      {text !== \"\" ? text + \" \" : \"\"}\n      <span className=\"keyname\">{keyname1}</span>{\" \"}\n      <span className=\"keytip\">or</span>{\" \"}\n      <span className=\"keyname\">{keyname2}</span>\n    </div>\n  );\n}\n\nfunction ToggleKeyButton(props) {\n  let $button_ref = useRef(null);\n  let { text, click, keyname, compare } = props;\n\n  // toggle requires click every time TODO: switch to mousedown for consistent response?\n\n  return (\n    <div\n      ref={$button_ref}\n      className={`button toggle ${compare ? \"active\" : \"\"}`}\n      role=\"button\"\n      onClick={click}\n    >\n      {text !== \"\" ? text + \" \" : \"\"}\n      <span className=\"keyname\">{keyname}</span>\n    </div>\n  );\n}\n","export function generateQuadPositions(x0, y0, x1, y1) {\n  return [\n    [x0, y0],\n    [x1, y0],\n    [x0, y1],\n    [x0, y1],\n    [x1, y0],\n    [x1, y1],\n  ];\n}\n\nexport function initImageQuad(scene, $img, x0, y0, x1, y1) {\n  let regl = scene.regl;\n  return regl({\n    frag: `\n    precision mediump float;\n    uniform vec4 color;\n    uniform sampler2D texture;\n    varying vec2 vuv;\n    void main () {\n      gl_FragColor = texture2D(texture, vuv);\n    }`,\n    vert: `\n    precision mediump float;\n    attribute vec2 position;\n    attribute vec2 uv;\n    varying vec2 vuv;\n    uniform mat4 view_projection;\n    void main () {\n      vuv = uv;\n      gl_Position = view_projection * vec4(position, 0, 1);\n    }`,\n    attributes: {\n      position: generateQuadPositions(x0, y0, x1, y1),\n      uv: [\n        [0, 0],\n        [1, 0],\n        [0, 1],\n        [0, 1],\n        [1, 0],\n        [1, 1],\n      ],\n    },\n    uniforms: {\n      texture: regl.texture($img),\n      color: [1, 1, 0, 1],\n      view_projection: regl.prop(\"view_projection\"),\n    },\n    count: 6,\n  });\n}\n","import { Fragment, useEffect, useRef, useState } from \"react\";\nimport {\n  RecoilRoot,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from \"recoil\";\nimport {\n  aActive,\n  aSize,\n  aGridSize,\n  sViewports,\n  aCols,\n  aRows,\n  aMode,\n  aBarHeight,\n  aSidebarWidth,\n  aCameras,\n  afCamera,\n  aImages,\n  sAddImage,\n  aImageMap,\n  sSetImageMap,\n  sMosaicCamera,\n  sAllCameras,\n} from \"./State.js\";\nimport {\n  setProjectionMatrices,\n  setViewMatrix,\n  getWorldFromPx,\n  setViewMatrices,\n} from \"./gl_utils\";\nimport {\n  RecoilUndoRoot,\n  useUndo,\n  useRedo,\n  useIsTrackingHistory,\n} from \"recoil-undo\";\nimport Keyboard from \"./Keyboard\";\nimport Mouse from \"./Mouse\";\nimport Sidebar from \"./Sidebar\";\nimport REGL from \"regl\";\nimport { base_zoom } from \"./constants\";\nimport { initImageQuad } from \"./shaders\";\n\nlet id_counter = 0;\nexport function getID() {\n  id_counter++;\n  return id_counter;\n}\n\nfunction Root() {\n  let scene_ref = useRef({\n    viewports: [],\n    projection: [],\n    inverse_projection: [],\n    views: [],\n    view_projections: [],\n    inverse_view_projections: [],\n    image_map: [],\n    image_draws: [],\n  });\n  let input_ref = useRef(null);\n\n  return (\n    <RecoilRoot>\n      <RecoilUndoRoot trackingByDefault={false}>\n        <input\n          style={{ display: \"none\" }}\n          type=\"file\"\n          accept=\"image/*\"\n          ref={input_ref}\n        />\n        <SizeObserver />\n        <div style={{ position: \"relative\", marginLeft: 4, marginTop: 4 }}>\n          <Canvas scene_ref={scene_ref} />\n          <ShowActive />\n          <ShowCameras />\n          <ReadActive />\n        </div>\n        <Sidebar scene_ref={scene_ref} input_ref={input_ref} />\n        <Keyboard scene_ref={scene_ref} input_ref={input_ref} />\n      </RecoilUndoRoot>\n    </RecoilRoot>\n  );\n}\n\nexport default Root;\n\nfunction SizeObserver() {\n  let setSize = useSetRecoilState(aSize);\n  let setGridSize = useSetRecoilState(aGridSize);\n  let barHeight = useRecoilValue(aBarHeight);\n  let sidebarWidth = useRecoilValue(aSidebarWidth);\n\n  useEffect(() => {\n    let w = window.innerWidth;\n    let h = window.innerHeight;\n    setSize([w - sidebarWidth - 4, h - barHeight - 4]);\n    setGridSize([w - sidebarWidth - 4, h - barHeight - 4]);\n  }, [setSize, setGridSize]);\n\n  return null;\n}\n\nfunction ShowActive() {\n  let active = useRecoilValue(aActive);\n  let viewports = useRecoilValue(sViewports);\n  let mode = useRecoilValue(aMode);\n\n  let v = viewports[0];\n  return (\n    <div\n      className=\"active-outline\"\n      style={{\n        position: \"absolute\",\n        left: active[0] * v[2],\n        top: active[1] * v[3],\n        width: active[2] * v[2],\n        height: active[3] * v[3],\n        pointerEvents: \"none\",\n      }}\n    >\n      {mode === \"resize\" ? (\n        <Fragment>\n          <div\n            style={{\n              position: \"absolute\",\n              left: 0,\n              top: 0,\n              background: \"#111\",\n              width: 17,\n              height: 17,\n              borderBottom: \"solid 1px white\",\n              borderRight: \"solid 1px white\",\n            }}\n          ></div>\n          <div\n            style={{\n              position: \"absolute\",\n              right: 0,\n              bottom: 0,\n              background: \"#111\",\n              width: 17,\n              height: 17,\n              borderTop: \"solid 1px white\",\n              borderLeft: \"solid 1px white\",\n            }}\n          ></div>\n        </Fragment>\n      ) : null}\n    </div>\n  );\n}\n\nfunction ShowCameras() {\n  let viewports = useRecoilValue(sViewports);\n  let camera_ids = useRecoilValue(aCameras);\n\n  return viewports.map((camera, i) => {\n    let v = viewports[i];\n    let id = camera_ids[i];\n    return (\n      <div\n        key={`camera${i}`}\n        style={{\n          position: \"absolute\",\n          left: v[0],\n          top: v[1],\n          width: v[2],\n          height: v[3],\n          pointerEvents: \"none\",\n        }}\n      >\n        <CameraRead id={id} />\n      </div>\n    );\n  });\n}\n\nfunction CameraRead({ id }) {\n  let camera = useRecoilValue(afCamera(id));\n  return (\n    <div\n      className=\"outline-text\"\n      style={{\n        position: \"absolute\",\n        left: 0,\n        bottom: 0,\n        paddingLeft: 8,\n        paddingRight: 8,\n        color: \"#eee\",\n        userSelect: \"none\",\n        width: \"100%\",\n        overflow: \"hidden\",\n      }}\n    >\n      {camera\n        .map((v) => Math.round((v + Number.EPSILON) * 100) / 100)\n        .join(\",\")}\n    </div>\n  );\n}\n\nfunction loadImage(scene, src, addImage, presetImageMap, callback) {\n  console.log(\"load image\");\n  let $img = new Image();\n  $img.onload = function () {\n    // might be a race condition\n    scene.pixel = getWorldFromPx(scene, 1, base_zoom);\n    let w = $img.width * scene.pixel;\n    let h = $img.height * scene.pixel;\n    let x0 = -w / 2;\n    let y0 = h / 2;\n    let x1 = w / 2;\n    let y1 = -h / 2;\n    let place = [x0, y0, x1, y1];\n\n    console.log(\"image loaded\");\n    addImage($img);\n    let drawImage = initImageQuad(scene, $img, ...place);\n    scene.image_draws.push(drawImage);\n    console.log(presetImageMap);\n    if (presetImageMap !== undefined) presetImageMap();\n    if (callback !== undefined) {\n      console.log(callback);\n      callback();\n    }\n  };\n  $img.src = src;\n}\n\nexport function domLoadImage(scene, input, addImage, presetImageMap) {\n  function handleChange(e) {\n    for (let item of this.files) {\n      if (item.type.indexOf(\"image\") < 0) {\n        continue;\n      }\n      let src = URL.createObjectURL(item);\n      loadImage(scene, src, addImage, presetImageMap);\n      input.value = null;\n    }\n    input.removeEventListener(\"change\", handleChange);\n  }\n  input.addEventListener(\"change\", handleChange);\n\n  input.dispatchEvent(\n    new MouseEvent(\"click\", {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n    })\n  );\n}\n\nfunction Canvas({ scene_ref }) {\n  let gridSize = useRecoilValue(aGridSize);\n  let viewports = useRecoilValue(sViewports);\n  let cols = useRecoilValue(aCols);\n  let rows = useRecoilValue(aRows);\n  let allCameras = useRecoilValue(sAllCameras);\n  let images = useRecoilValue(aImages);\n  let addImage = useSetRecoilState(sAddImage);\n  let [imageMap, rawSetImageMap] = useRecoilState(aImageMap);\n  let setImageMap = useSetRecoilState(sSetImageMap);\n  let mosaicCamera = useSetRecoilState(sMosaicCamera);\n  let [cameras, setCameras] = useRecoilState(aCameras);\n  let canvas_ref = useRef(null);\n  let regl_ref = useRef(null);\n  let [loaded, setLoaded] = useState(false);\n  const { getIsTrackingHistory, setIsTrackingHistory } = useIsTrackingHistory();\n\n  useEffect(() => {\n    if (gridSize[0] !== null && !loaded) {\n      let regl = REGL(canvas_ref.current);\n      regl_ref.current = regl;\n      let scene = scene_ref.current;\n      scene.regl = regl;\n\n      // init cameras and scene arrays\n      let camera_ids = [];\n      for (let i = 0; i < cols * rows; i++) {\n        let id = getID();\n        camera_ids.push(id);\n        scene.views.push([]);\n        scene.view_projections.push([]);\n        scene.inverse_view_projections.push([]);\n        scene.image_map.push(null);\n      }\n      setCameras(camera_ids);\n      scene.cameras = [...Array(cols * rows)].map((v) => [0, 0, 5]);\n\n      rawSetImageMap([...Array(cols * rows)].map((v) => null));\n\n      loadImage(\n        scene,\n        process.env.PUBLIC_URL + \"/images/keyboard.png\",\n        addImage,\n        setImageMap.bind(null, { active: [0, 0, cols, rows] }),\n        () => {\n          mosaicCamera({ scene, active: [0, 0, cols, rows] });\n          setIsTrackingHistory(true);\n        }\n      );\n\n      let gl = canvas_ref.current.getContext(\"webgl\");\n      gl.enable(gl.SCISSOR_TEST);\n\n      regl.frame(({ tick }) => {\n        regl.clear({\n          color: [0, 0, 0, 1],\n        });\n        if (scene.viewports.length > 0) {\n          let vy_offset =\n            scene.gridSize[1] - scene.viewports[0][3] * scene.rows;\n          for (let i = 0; i < scene.viewports.length; i++) {\n            let viewport = scene.viewports[i];\n            let [vx, vy, vw, vh] = viewport;\n            // gap at bottom instead of top\n            vy = vy + vy_offset;\n            gl.viewport(vx, vy, vw, vh);\n            gl.scissor(vx, vy, vw, vh);\n            regl.clear({\n              color: [0, 0, 0, 1],\n            });\n            if (scene.image_map.length > 0 && scene.image_map[i] !== null) {\n              let draw = scene.image_draws[scene.image_map[i]];\n              draw({\n                view_projection: scene.view_projections[i],\n              });\n            }\n          }\n        }\n      });\n      setLoaded(true);\n    }\n  }, [gridSize, loaded]);\n\n  useEffect(() => {\n    if (loaded) {\n      let scene = scene_ref.current;\n      scene.image_map = imageMap;\n    }\n  }, [loaded, imageMap]);\n\n  useEffect(() => {\n    if (loaded) {\n      let scene = scene_ref.current;\n\n      let rawCameras = allCameras.slice();\n      let invertedCameras = [];\n      for (let r = 0; r < rows; r++) {\n        for (let c = 0; c < cols; c++) {\n          let index = r * cols + c;\n          let invert_row = rows - 1 - Math.floor(index / cols);\n          let inverted = invert_row * cols + (index % cols);\n          invertedCameras.push(rawCameras[inverted]);\n        }\n      }\n\n      scene.cameras = invertedCameras;\n      scene.gridSize = gridSize;\n      scene.cols = cols;\n      scene.rows = rows;\n      scene.viewports = viewports;\n\n      setProjectionMatrices(scene);\n\n      scene.views = [];\n      scene.view_projections = [];\n      scene.inverse_view_projections = [];\n      for (let i = 0; i < cols * rows; i++) {\n        scene.views.push([]);\n        scene.view_projections.push([]);\n        scene.inverse_view_projections.push([]);\n      }\n      setViewMatrices(scene);\n    }\n  }, [loaded, cols, rows, gridSize, viewports, cameras]);\n\n  return gridSize[0] !== null ? (\n    <canvas width={gridSize[0]} height={gridSize[1]} ref={canvas_ref}>\n      {cameras.map((id, index) => (\n        <CanvasCamera key={id} id={id} index={index} scene_ref={scene_ref} />\n      ))}\n      <Mouse canvas_ref={canvas_ref} scene_ref={scene_ref} />\n    </canvas>\n  ) : null;\n}\n\nfunction CanvasCamera({ id, index, scene_ref }) {\n  let camera = useRecoilValue(afCamera(id));\n\n  useEffect(() => {\n    let scene = scene_ref.current;\n\n    let invert_row = scene.rows - 1 - Math.floor(index / scene.cols);\n    let inverted = invert_row * scene.cols + (index % scene.cols);\n\n    scene.cameras[inverted] = camera;\n    setViewMatrix(scene, inverted);\n  }, [id, index, camera, scene_ref]);\n\n  return null;\n}\n\nfunction ReadActive() {\n  let [x, y, w, h] = useRecoilValue(aActive);\n  let cols = useRecoilValue(aCols);\n  let index = y * cols + x;\n\n  return (\n    <div style={{ paddingTop: 8, paddingLeft: 8 }}>\n      □ {x},{y} {w}x{h}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}